CREATE OR REPLACE
PACKAGE BODY cobranza.PACK_CLIENTE AS

  PROCEDURE INSERTAR_CLIENTE(

    p_TIPO_DOCUMENTO  IN CLIENTE.TIPO_DOCUMENTO%TYPE,
    p_NRO_DOCUMENTO IN CLIENTE.NRO_DOCUMENTO%TYPE,
    p_NOMBRES IN CLIENTE.NOMBRES%TYPE,
    p_APELLIDOS IN CLIENTE.APELLIDOS%TYPE,
    p_SEXO IN CLIENTE.SEXO%TYPE,
    p_FECHA_NACIMIENTO IN CLIENTE.FECHA_NACIMIENTO%TYPE,
    p_CELULAR IN CLIENTE.CELULAR%TYPE,
    p_DIRECCION IN CLIENTE.DIRECCION%TYPE,
    p_DISTRITO IN CLIENTE.DISTRITO%TYPE,
    p_PROVINCIA IN CLIENTE.PROVINCIA%TYPE,
    p_DEPARTAMENTO IN CLIENTE.DEPARTAMENTO%TYPE,
    P_COD_RESPUESTA       OUT NOCOPY  NUMBER,
    P_MENSAJE OUT NOCOPY  VARCHAR2
  ) AS
    V_ID_CLIENTE int;
    V_EXISTEDNI int;
  BEGIN
   

    select count(ID_CLIENTE)
    into V_EXISTEDNI
    from CLIENTE 
    where p_TIPO_DOCUMENTO=TIPO_DOCUMENTO
    and p_NRO_DOCUMENTO= NRO_DOCUMENTO;
    
    IF (V_EXISTEDNI > 0) THEN
      RAISE_APPLICATION_ERROR(-20004, 'DNI DE CLIENTE YA EXISTE');
    END IF;
    
    select max(ID_CLIENTE)+1 
    into V_ID_CLIENTE
    from CLIENTE ;
    
    
    INSERT INTO CLIENTE  
      VALUES
      (
        V_ID_CLIENTE,
        p_TIPO_DOCUMENTO,
        p_NRO_DOCUMENTO,
        p_NOMBRES,
        p_APELLIDOS,
        p_SEXO,
        p_FECHA_NACIMIENTO,
        p_CELULAR,
        p_DIRECCION,
        p_DISTRITO,
        p_PROVINCIA ,
        p_DEPARTAMENTO
      );

   P_COD_RESPUESTA := 0;
   P_MENSAJE := 'SE CREO CLIENTE';
   COMMIT;
   
   EXCEPTION

    WHEN OTHERS THEN
      P_COD_RESPUESTA := -1;
      P_MENSAJE := TO_CHAR(sqlcode) || ' - ' || SQLERRM;
      ROLLBACK;
   
  END INSERTAR_CLIENTE;

  PROCEDURE MODIFICAR_CLIENTE(

    p_ID_CLIENTE  IN CLIENTE.ID_CLIENTE%TYPE,
    p_NOMBRES IN CLIENTE.NOMBRES%TYPE,
    p_APELLIDOS IN CLIENTE.APELLIDOS%TYPE,
    p_SEXO IN CLIENTE.SEXO%TYPE,
    p_FECHA_NACIMIENTO IN CLIENTE.FECHA_NACIMIENTO%TYPE,
    p_CELULAR IN CLIENTE.CELULAR%TYPE,
    p_DIRECCION IN CLIENTE.DIRECCION%TYPE,
    p_DISTRITO IN CLIENTE.DISTRITO%TYPE,
    p_PROVINCIA IN CLIENTE.PROVINCIA%TYPE,
    p_DEPARTAMENTO IN CLIENTE.DEPARTAMENTO%TYPE,
    P_COD_RESPUESTA       OUT NOCOPY  NUMBER,
    P_MENSAJE OUT NOCOPY  VARCHAR2
  ) AS
   V_EXISTEDNI int;
  BEGIN
  
    select count(ID_CLIENTE)
    into V_EXISTEDNI
    from CLIENTE 
    where ID_CLIENTE=p_ID_CLIENTE;
    
    IF (V_EXISTEDNI = 0) THEN
      RAISE_APPLICATION_ERROR(-20004, 'CLIENTE NO EXISTE');
    END IF;
  
  UPDATE CLIENTE
    SET  NOMBRES          = p_NOMBRES,
     APELLIDOS        = p_APELLIDOS,
     SEXO             = p_SEXO,
     FECHA_NACIMIENTO = p_FECHA_NACIMIENTO,
     CELULAR          = p_CELULAR,
     DIRECCION        = p_DIRECCION,
     DISTRITO         = p_DISTRITO,
     PROVINCIA        = p_PROVINCIA,
     DEPARTAMENTO     = p_DEPARTAMENTO
    WHERE ID_CLIENTE     = p_ID_CLIENTE;      
  
   P_COD_RESPUESTA := 0;
   P_MENSAJE := 'SE ACTUALIZO CLIENTE';
   COMMIT;
   
   EXCEPTION

    WHEN OTHERS THEN
      P_COD_RESPUESTA := -1;
      P_MENSAJE := TO_CHAR(sqlcode) || ' - ' || SQLERRM;
      ROLLBACK;
      
  END MODIFICAR_CLIENTE;

  PROCEDURE ELIMINAR_CLIENTE(
    p_ID_CLIENTE  IN CLIENTE.ID_CLIENTE%TYPE, 
    P_COD_RESPUESTA       OUT NOCOPY  NUMBER,
    P_MENSAJE OUT NOCOPY  VARCHAR2
  ) AS
    V_EXISTEDNI int;
  BEGIN
    select count(ID_CLIENTE)
    into V_EXISTEDNI
    from CLIENTE 
    where ID_CLIENTE=p_ID_CLIENTE;
    
    IF (V_EXISTEDNI = 0) THEN
      RAISE_APPLICATION_ERROR(-20004, 'CLIENTE NO EXISTE');
    END IF;
    
    DELETE
    FROM CLIENTE
    WHERE ID_CLIENTE     = p_ID_CLIENTE;
    
    P_COD_RESPUESTA := 0;
    P_MENSAJE := 'SE ELIMINO AL CLIENTE';
     COMMIT;
    
  EXCEPTION

    WHEN OTHERS THEN
      P_COD_RESPUESTA := -1;
      P_MENSAJE := TO_CHAR(sqlcode) || ' - ' || SQLERRM;
      ROLLBACK;
      
  END ELIMINAR_CLIENTE;

  PROCEDURE OBTENER_CLIENTES(
    p_ID_CLIENTE  IN CLIENTE.ID_CLIENTE%TYPE, 
    p_TIPO_DOCUMENTO  IN CLIENTE.TIPO_DOCUMENTO%TYPE,
    p_NRO_DOCUMENTO IN CLIENTE.NRO_DOCUMENTO%TYPE,
    P_CURSOR OUT NOCOPY SYS_REFCURSOR,
    P_COD_RESPUESTA       OUT NOCOPY  NUMBER,
    P_MENSAJE OUT NOCOPY  VARCHAR2
  ) AS
    V_EXISTEDNI int;
    V_ID_CLIENTE  VARCHAR2(3);
    V_TIPO_DOCUMENTO VARCHAR2(5);
    V_NRO_DOCUMENTO VARCHAR2(21);
  BEGIN
  
    V_ID_CLIENTE := '%' || p_ID_CLIENTE || '%';
     V_TIPO_DOCUMENTO := '%' || p_TIPO_DOCUMENTO || '%';
     V_NRO_DOCUMENTO := '%' || p_NRO_DOCUMENTO || '%';
     
    select count(ID_CLIENTE)
    into V_EXISTEDNI
    from CLIENTE 
     where ID_CLIENTE  LIKE NVL2(p_ID_CLIENTE,V_ID_CLIENTE,ID_CLIENTE) 
    AND TIPO_DOCUMENTO  LIKE NVL2(p_TIPO_DOCUMENTO,V_TIPO_DOCUMENTO,TIPO_DOCUMENTO) 
    AND NRO_DOCUMENTO  LIKE NVL2(p_NRO_DOCUMENTO,V_NRO_DOCUMENTO,NRO_DOCUMENTO) ;
    
    
    
    IF (V_EXISTEDNI = 0) THEN
      RAISE_APPLICATION_ERROR(-20004, 'CLIENTE NO EXISTE');
    END IF;
    
   
    
    
        OPEN P_CURSOR FOR
    SELECT ID_CLIENTE,
      TIPO_DOCUMENTO,
      NRO_DOCUMENTO,
      NOMBRES,
      APELLIDOS,
      SEXO,
      FECHA_NACIMIENTO,
      CELULAR,
      DIRECCION,
      DISTRITO,
      PROVINCIA,
      DEPARTAMENTO
    FROM CLIENTE 
    where ID_CLIENTE  LIKE NVL2(p_ID_CLIENTE,V_ID_CLIENTE,ID_CLIENTE) 
    AND TIPO_DOCUMENTO  LIKE NVL2(p_TIPO_DOCUMENTO,V_TIPO_DOCUMENTO,TIPO_DOCUMENTO) 
    AND NRO_DOCUMENTO  LIKE NVL2(p_NRO_DOCUMENTO,V_NRO_DOCUMENTO,NRO_DOCUMENTO) 
    ;
    
    P_COD_RESPUESTA := 0;
   P_MENSAJE := 'SE SELECCIONO LOS CLIENTES';
    
   EXCEPTION

    WHEN OTHERS THEN
      P_COD_RESPUESTA := -1;
      P_MENSAJE := TO_CHAR(sqlcode) || ' - ' || SQLERRM;
  END OBTENER_CLIENTES;

  PROCEDURE OBTENER_CLIENTE_ID(
    p_ID_CLIENTE  IN CLIENTE.ID_CLIENTE%TYPE,    
    P_CURSOR OUT NOCOPY SYS_REFCURSOR,
    P_COD_RESPUESTA       OUT NOCOPY  NUMBER,
    P_MENSAJE OUT NOCOPY  VARCHAR2
  ) AS
    V_EXISTEDNI int;
  BEGIN
    select count(ID_CLIENTE)
    into V_EXISTEDNI
    from CLIENTE 
    where ID_CLIENTE=p_ID_CLIENTE;
    
    IF (V_EXISTEDNI = 0) THEN
      RAISE_APPLICATION_ERROR(-20004, 'CLIENTE NO EXISTE');
    END IF;
    
    OPEN P_CURSOR FOR
    SELECT ID_CLIENTE,
      TIPO_DOCUMENTO,
      NRO_DOCUMENTO,
      NOMBRES,
      APELLIDOS,
      SEXO,
      FECHA_NACIMIENTO,
      CELULAR,
      DIRECCION,
      DISTRITO,
      PROVINCIA,
      DEPARTAMENTO
    FROM CLIENTE 
    where ID_CLIENTE=p_ID_CLIENTE;
        
    P_COD_RESPUESTA := 0;
    P_MENSAJE := 'SE SELECCCIONO CLIENTE';
    
  EXCEPTION

    WHEN OTHERS THEN
      P_COD_RESPUESTA := -1;
      P_MENSAJE := TO_CHAR(sqlcode) || ' - ' || SQLERRM;    
    
  END OBTENER_CLIENTE_ID;

END PACK_CLIENTE;